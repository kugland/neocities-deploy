name: Tests and release

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:

env:
  RUST_BACKTRACE: 1

jobs:
  sanity-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Version sanity checks
        run: |
          set -e

          GIT_VER="$( (git tag; git log --pretty='%s') |sort -Vr |sed -En '/^v[0-9]+\.[0-9]+\.[0-9]+$/{p;q}' )"
          CARGO_VER="v$(sed -En '/^\s*version\s*=\s*"([^"]+)"$/{s//\1/; p}' Cargo.toml)"

          SUCCESS=true
          if [[ "${GIT_VER}" != "${CARGO_VER}" ]]; then
            echo "Latest tag does not match version number in Cargo.toml"
            SUCCESS=false
          fi

          echo "Latest tag: ${GIT_VER}"
          echo "Cargo.toml: ${CARGO_VER}"

          $SUCCESS || exit 1
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
      - name: Run cargo fmt
        run: cargo fmt --all -- --check
      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- --deny warnings
      - name: Check if Cargo.lock is up-to-date
        run: cargo check --locked

  tests-and-release:
    needs: sanity-checks
    name: "${{ matrix.platform.target }} / ${{ matrix.toolchain }}"
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: neocities-deploy
            name: neocities-deploy-Linux-x86_64-musl.tar.gz
          - os_name: Linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            bin: neocities-deploy
            name: neocities-deploy-Linux-aarch64-musl.tar.gz
          - os_name: Linux-arm
            os: ubuntu-20.04
            target: arm-unknown-linux-musleabi
            bin: neocities-deploy
            name: neocities-deploy-Linux-arm-musl.tar.gz
          - os_name: Linux-i686
            os: ubuntu-20.04
            target: i686-unknown-linux-musl
            bin: neocities-deploy
            name: neocities-deploy-Linux-i686-musl.tar.gz
            skip_tests: true
          - os_name: Linux-riscv64
            os: ubuntu-20.04
            target: riscv64gc-unknown-linux-gnu
            bin: neocities-deploy
            name: neocities-deploy-Linux-riscv64gc-gnu.tar.gz
          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: neocities-deploy.exe
            name: neocities-deploy-Windows-aarch64.zip
            skip_tests: true
          - os_name: Windows-i686
            os: windows-latest
            target: i686-pc-windows-msvc
            bin: neocities-deploy.exe
            name: neocities-deploy-Windows-i686.zip
            skip_tests: true
          - os_name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: neocities-deploy.exe
            name: neocities-deploy-Windows-x86_64.zip
          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: neocities-deploy
            name: neocities-deploy-Darwin-x86_64.tar.gz
          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: neocities-deploy
            name: neocities-deploy-Darwin-aarch64.tar.gz
            skip_tests: true
        toolchain:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
      - name: Configure Git
        run: |
          git config --global user.email "jdoe@example.com"
          git config --global user.name "J. Doe"
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.name, 'musl')
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --release"
          strip: true
      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "test"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args: "--locked --release"
        if: ${{ !matrix.platform.skip_tests }}
      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          fi
          cd -
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
      - name: Publish release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: neocities-deploy-${{ matrix.platform.os_name }}
          path: "neocities-deploy-*"
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "neocities-deploy-*"
        if: matrix.toolchain == 'stable' && startsWith( github.ref, 'refs/tags/v' )

  aur-publish:
    runs-on: ubuntu-latest
    needs: tests-and-release
    steps:
      - name: Publish AUR package
        uses: ATiltedTree/create-aur-release@v1
        with:
          package_name: neocities-deploy
          commit_username: "Github Action Bot"
          commit_email: github-action-bot@example.com
          ssh_private_key: ${{ secrets.AUR_SSH_KEY }}
        if: startsWith( github.ref, 'refs/tags/v' )
